---
- name: Override kdevops archive repo url to demo URL if in demo mode
  set_fact:
    kdevops_results_repo_url: "{{ kdevops_results_repo_url_demo }}"
  when:
    - 'kdevops_archive_demo|bool'

- name: Notify this is a kdevops-results-archive demo
  ansible.builtin.debug:
    msg: "This is a kdevops archive demo: {{ kdevops_results_repo_url }}"
  when:
    - 'kdevops_archive_demo|bool'

- name: Check if kdevops archive/ directory exists
  ansible.builtin.stat:
    path: "{{ kdevops_results_local }}"
  register: results_dir

- name: Remove stale kdevops archive/ directory
  ansible.builtin.file:
    path: "{{ kdevops_results_local }}"
    state: absent
  when: results_dir.stat.exists
  become: yes

- name: Create new kdevops archive/ for new results
  file:
    path: "{{ kdevops_results_local }}"
    state: directory
    mode: '0755'

- name: Get list of files from make ci-results for our archive/
  command: make ci-results
  register: ci_results
  args:
    chdir: "{{ topdir_path }}"

- name: Get current user
  command: whoami
  register: current_user
  changed_when: false

- name: Ensure source files are readable by current user
  become: yes
  shell: |
    for item in {{ ci_results.stdout_lines | join(' ') }}; do
      if [ -e "$item" ] || compgen -G "$item" > /dev/null; then
        find "$item" -type d -exec chmod 755 {} +
        find "$item" -type f -exec chmod 644 {} +
        chown -R {{ current_user.stdout }}:{{ current_user.stdout }} "$item"
      fi
    done
  args:
    executable: /bin/bash
  when: ci_results.stdout_lines | length > 0

- name: Copy files and directories to the our archive/
  shell: |
    for item in {{ ci_results.stdout_lines | join(' ') }}; do
      if [ -e "$item" ] || compgen -G "$item" > /dev/null; then
        rsync -a --relative "$item" "{{ kdevops_results_local }}"
      fi
    done
  args:
    chdir: "{{ topdir_path }}"
  when: ci_results.stdout_lines | length > 0

- name: Count files and directories in archive/
  command: find "{{ kdevops_results_local }}" -mindepth 1 -type f,d
  register: kdevops_archive_data
  changed_when: false

- name: Count files and directories we're putting into archive/
  set_fact:
    kdevops_archive_data_count: "{{ kdevops_archive_data.stdout_lines | length }}"

- name: CI archive not setup
  debug:
    msg: |
      The output of `make ci-results` yielded no files, this likely means
      you have not setup which results we should copy for this target
      development tree: {{ target_linux_tree}}
      To set this up you need these set up:
        .ci/build-test/{{ target_linux_tree }}
        .ci/tests-test/{{ target_linux_tree }}
        .ci/results/{{ target_linux_tree }}
  when:
    - kdevops_archive_data_count | int == 0

- name: Archiving disabled
  meta: end_play
  when:
    - kdevops_archive_data_count | int == 0

- name: Ensure copied files are readable by current user
  become: yes
  shell: |
    find "{{ kdevops_results_local }}" -type d -exec chmod 755 {} +
    find "{{ kdevops_results_local }}" -type f -exec chmod 644 {} +
    chown -R {{ current_user.stdout }}:{{ current_user.stdout }} "{{ kdevops_results_local }}"
  args:
    executable: /bin/bash

- name: Copy files and directories to the archive/
  shell: |
    for item in {{ ci_results.stdout_lines | join(' ') }}; do
      if [ -e "$item" ]; then
        cp -R --parents "$item" "{{ kdevops_results_local }}"
      fi
    done
  args:
    chdir: "{{ topdir_path }}"
  when: ci_results.stdout_lines | length > 0

- name: Create our archive/ xz file for kdevops-results-archive
  archive:
    path: "{{ kdevops_results_local }}"
    dest: "{{ kdevops_results }}/{{ target_linux_ref }}.xz"
    format: xz
    remove: no

- name: Create the same archive/ zip file for web CI artifacts
  archive:
    path: "{{ kdevops_results_local }}"
    dest: "{{ kdevops_results }}/{{ target_linux_ref }}.zip"
    format: zip
    remove: no

- name: Find archive files to verify
  find:
    paths: "{{ kdevops_results }}"
    patterns:
      - "*.zip"
      - "*.xz"
  register: archive_files

- name: Get archive file stat
  stat:
    path: "{{ item.path }}"
  register: archive_stats
  loop: "{{ archive_files.files }}"
  changed_when: false
  no_log: true

- name: Display archive file information
  debug:
    msg: "{{ item.stat.path }} ({{ (item.stat.size / 1024 / 1024) | round(2) }}MB)"
  loop: "{{ archive_stats.results }}"
  loop_control:
    label: "{{ item.stat.path | basename }}"

- name: Check if kdevops-results-archive directory exists
  stat:
    path: "{{ kdevops_results_archive_dir }}"
  register: archive_dir

- name: Check if mirror directory exists
  stat:
    path: "{{ kdevops_archive }}"
  register: mirror_dir
  when:
    - not archive_dir.stat.exists

- name: Set kdevops_archive_mirror_present based on mirror directory existence
  set_fact:
    kdevops_archive_mirror_present: "{{ mirror_dir.stat.exists }}"
  when:
    - not archive_dir.stat.exists
    - mirror_dir.stat.exists

- name: Clone kdevops-results-archive repository with git LFS
  git:
    repo: "{{ kdevops_results_repo_url }}"
    dest: "{{ kdevops_results_archive_dir }}"
    version: main
  environment:
    GIT_LFS_SKIP_SMUDGE: "1"
  when:
    - not archive_dir.stat.exists
    - not kdevops_archive_mirror_present
  register: git_clone_result

- name: Clone kdevops-results-archive repository with git LFS and use the local mirror
  git:
    repo: "{{ kdevops_results_repo_url }}"
    dest: "{{ kdevops_results_archive_dir }}"
    version: main
    reference: "{{ kdevops_archive }}"
  environment:
    GIT_LFS_SKIP_SMUDGE: "1"
  when:
    - not archive_dir.stat.exists
    - kdevops_archive_mirror_present
  register: git_clone_result

- name: Update kdevops-results-archive repository
  git:
    repo: "{{ kdevops_results_repo_url }}"
    dest: "{{ kdevops_results_archive_dir }}"
    update: yes
    force: yes
  environment:
    GIT_LFS_SKIP_SMUDGE: "1"

- name: Remind user this is a demo
  ansible.builtin.debug:
    msg: "This is a kdevops archive demo, throw away results"
  when:
    - 'kdevops_archive_demo|bool'

- name: Get current date in YYYYMMDD format
  set_fact:
    current_date: "{{ '%Y%m%d' | strftime }}"

- name: Construct base directory path
  set_fact:
    kdevops_archive_base: "{{ kdevops_workflow_name }}/{{ current_user.stdout }}/{{ target_linux_tree }}/{{ current_date }}"

- name: Get current date in YYYYMMDD format
  set_fact:
    current_date: "{{ '%Y%m%d' | strftime }}"

- name: Construct base directory path
  set_fact:
    kdevops_archive_base: "{{ kdevops_workflow_name }}/{{ current_user.stdout }}/{{ target_linux_tree }}/{{ current_date }}"

- name: Ensure base directory exists
  file:
    path: "{{ kdevops_results_archive_dir }}/{{ kdevops_archive_base }}"
    state: directory
    mode: '0755'

- name: Get current date in YYYYMMDD format
  set_fact:
    current_date: "{{ '%Y%m%d' | strftime }}"

- name: Construct base directory path
  set_fact:
    kdevops_archive_base: "{{ kdevops_workflow_name }}/{{ current_user.stdout }}/{{ target_linux_tree }}/{{ current_date }}"

- name: List all directories in base path
  find:
    paths: "{{ kdevops_results_archive_dir }}/{{ kdevops_archive_base }}"
    file_type: directory
  register: all_dirs

- name: Get directory names only
  set_fact:
    dir_names: "{{ all_dirs.files | map(attribute='path') | map('basename') | list }}"

- name: Filter for numbered directories
  set_fact:
    numbered_dirs: "{{ dir_names | select('match', '^\\d{4}$') | list }}"

- name: Get highest number or default to 0
  set_fact:
    current_highest: "{{ (numbered_dirs | map('int') | max | default(0)) | int }}"

- name: Calculate next number
  set_fact:
    next_number_int: "{{ (current_highest | int) + 1 }}"

- name: Convert to padded string
  set_fact:
    next_number: "{{ '%04d' % (next_number_int | int)}}"

- name: Set archive test number
  set_fact:
    kdevops_archive_test_number: "{{ next_number }}"

- name: Set complete archive prefix
  set_fact:
    kdevops_archive_prefix: "{{ kdevops_archive_base }}/{{ next_number }}/{{ target_linux_ref }}/"

- name: Set complete archive prefix
  set_fact:
    kdevops_archive_prefix: "{{ kdevops_archive_base }}/{{ kdevops_archive_test_number }}/{{ target_linux_ref }}/"

- name: Create target directory if it doesn't exist
  file:
    path: "{{ kdevops_results_archive_dir }}/{{ kdevops_archive_prefix }}"
    state: directory
    mode: '0755'

- name: Copy archive to target directory
  copy:
    src: "{{ kdevops_results }}/{{ target_linux_ref }}.xz"
    dest: "{{ kdevops_results_archive_dir }}/{{ kdevops_archive_prefix }}"
    mode: '0644'

- name: Stage the new archive file
  command:
    cmd: git add "{{ kdevops_archive_prefix }}{{ target_linux_ref }}.xz"
  args:
    chdir: "{{ kdevops_results_archive_dir }}"

- name: Set commit message
  set_fact:
    commit_message: |
      {{ kdevops_workflow_name }}: {{ target_linux_tree }} {{ target_linux_ref }} result #{{ kdevops_archive_test_number }}

      This adds test results for:
        workflow: {{ kdevops_workflow_name }}
        tree: {{ target_linux_tree }}
        ref: {{ target_linux_ref }}
        test number: {{ kdevops_archive_test_number }}

- name: Commit the archive
  shell: |
    git commit -m "{{ commit_message }}"
  args:
    chdir: "{{ kdevops_results_archive_dir }}"

- name: Push changes to remote repository
  command:
    cmd: git push origin main
  args:
    chdir: "{{ kdevops_results_archive_dir }}"
  register: git_push_result
  ignore_errors: yes

- name: Display push error if it failed
  debug:
    msg: "Failed to push changes: {{ git_push_result.stderr }}"
  when: git_push_result.rc != 0
