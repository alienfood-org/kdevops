---
- name: Override kdevops archive repo url to demo URL if in demo mode
  set_fact:
    kdevops_results_repo_url: "{{ kdevops_results_repo_url_demo }}"
  when:
    - 'kdevops_archive_demo|bool'

- name: Notify this is a kdevops-results-archive demo
  ansible.builtin.debug:
    msg: "This is a kdevops archive demo: {{ kdevops_results_repo_url }}"
  when:
    - 'kdevops_archive_demo|bool'

- name: Check if kdevops archive/ directory exists
  ansible.builtin.stat:
    path: "{{ kdevops_results_local }}"
  register: results_dir

- name: Remove stale kdevops archive/ directory
  ansible.builtin.file:
    path: "{{ kdevops_results_local }}"
    state: absent
  when: results_dir.stat.exists
  become: yes

- name: Create new kdevops archive/ for new results
  file:
    path: "{{ kdevops_results_local }}"
    state: directory
    mode: '0755'

- name: Get list of files from make ci-results for our archive/
  command: make ci-results
  register: ci_results
  args:
    chdir: "{{ topdir_path }}"

- name: Get current user
  command: whoami
  register: current_user
  changed_when: false

- name: Ensure source files are readable by current user
  become: yes
  shell: |
    for item in {{ ci_results.stdout_lines | join(' ') }}; do
      if [ -e "$item" ] || compgen -G "$item" > /dev/null; then
        find "$item" -type d -exec chmod 755 {} +
        find "$item" -type f -exec chmod 644 {} +
        chown -R {{ current_user.stdout }}:{{ current_user.stdout }} "$item"
      fi
    done
  args:
    executable: /bin/bash
  when: ci_results.stdout_lines | length > 0

- name: Copy files and directories to the our archive/
  shell: |
    for item in {{ ci_results.stdout_lines | join(' ') }}; do
      if [ -e "$item" ] || compgen -G "$item" > /dev/null; then
        rsync -a --relative "$item" "{{ kdevops_results_local }}"
      fi
    done
  args:
    chdir: "{{ topdir_path }}"
  when: ci_results.stdout_lines | length > 0

- name: Count files and directories in archive/
  command: find "{{ kdevops_results_local }}" -mindepth 1 -type f,d
  register: kdevops_archive_data
  changed_when: false

- name: Count files and directories we're putting into archive/
  set_fact:
    kdevops_archive_data_count: "{{ kdevops_archive_data.stdout_lines | length }}"

- name: CI archive not setup
  debug:
    msg: |
      The output of `make ci-results` yielded no files, this likely means
      you have not setup which results we should copy for this target
      development tree: {{ target_linux_tree}}
      To set this up you need these set up:
        .ci/build-test/{{ target_linux_tree }}
        .ci/tests-test/{{ target_linux_tree }}
        .ci/results/{{ target_linux_tree }}
  when:
    - kdevops_archive_data_count | int == 0

- name: Archiving disabled
  meta: end_play
  when:
    - kdevops_archive_data_count | int == 0

- name: Ensure copied files are readable by current user
  become: yes
  shell: |
    find "{{ kdevops_results_local }}" -type d -exec chmod 755 {} +
    find "{{ kdevops_results_local }}" -type f -exec chmod 644 {} +
    chown -R {{ current_user.stdout }}:{{ current_user.stdout }} "{{ kdevops_results_local }}"
  args:
    executable: /bin/bash

- name: Copy files and directories to the archive/
  shell: |
    for item in {{ ci_results.stdout_lines | join(' ') }}; do
      if [ -e "$item" ]; then
        cp -R --parents "$item" "{{ kdevops_results_local }}"
      fi
    done
  args:
    chdir: "{{ topdir_path }}"
  when: ci_results.stdout_lines | length > 0

- name: Create our archive/ tar.xz for our test results
  archive:
    path: "{{ kdevops_results_local }}"
    dest: "{{ kdevops_results }}/{{ target_linux_ref }}.xz"
    format: xz
    remove: no

- name: Create the same zip archive as well
  archive:
    path: "{{ kdevops_results_local }}"
    dest: "{{ kdevops_results }}/{{ target_linux_ref }}.zip"
    format: zip
    remove: no

- name: Get SSH configuration for the kdevops archive repo
  ansible.builtin.command: ssh -G {{ kdevops_results_repo_url_user }}@{{ kdevops_results_repo_path }}
  register: ssh_archive_config_repo
  changed_when: false

- name: Extract kdevops archive repo IdentityFile
  vars:
    identity_file_lines: "{{ ssh_archive_config_repo.stdout_lines | select('match', '^identityfile ') }}"
    identity_file_raw: "{{ identity_file_lines | first | regex_replace('^identityfile (.*)$', '\\1') }}"
  ansible.builtin.set_fact:
    kdevops_archive_identity_file: "{{ identity_file_raw | regex_replace('^~', lookup('env', 'HOME')) }}"

- name: Check if the key used for the kdevops archive repo is installed
  ansible.builtin.set_fact:
    kdevops_archive_key_detected: "{{ kdevops_archive_key_name in (kdevops_archive_identity_file | basename) }}"

- name: Inform user of how to set up the kdevops archive repo key
  ansible.builtin.debug:
    msg: |
      ssh key archive test for {{ kdevops_results_repo_url }}:
      We ran:

        ssh -G {{ kdevops_results_repo_url_user }}@{{ kdevops_results_repo_path }} | grep identityfile

      Missing key name: '{{ kdevops_archive_key_name }}'
      Current IdentityFile:
        {{ kdevops_archive_identity_file }}

      To set up automatic kdevops repo archiving install something like
      the following key for host {{ kdevops_archive_host }}:

      Host {{ kdevops_results_repo_path }}
          User {{ kdevops_results_repo_url_user }}
          Hostname {{ kdevops_archive_host }}
          IdentityFile {{ lookup('env', 'HOME') }}/.ssh/{{ kdevops_archive_key_name }}


      Create the key first with something like:

        ssh-keygen -t ed25519 -C "{{ kdevops_results_repo_url_user}}@{{ kdevops_results_repo_path }}" -f {{ lookup('env', 'HOME') }}/.ssh/{{ kdevops_archive_key_name }}

      Then install it as deploy key for {{ kdevops_results_repo_path}}:

      https://docs.github.com/en/authentication/connecting-to-github-with-ssh/managing-deploy-keys#deploy-keys

      And then add the above to your {{ lookup('env', 'HOME') }}/.ssh/config

  when:
    - 'not kdevops_archive_key_detected|bool'
    - 'bootlinux_tree_set_by_cli|bool'

- name: Gracefully end if key is not found for automatic kdevops archiving
  meta: end_play
  when:
    - not kdevops_archive_key_detected

- name: Check if the detected kdevops archive repo key exists
  ansible.builtin.stat:
    path: "{{ kdevops_archive_identity_file }}"
  register: ssh_key_file_lookup

- name: Inform user of configured but not created key
  ansible.builtin.debug:
    msg: |
      Key to be used missing: {{ kdevops_archive_identity_file }}
      Create the key with something like:
        ssh-keygen -t ed25519 -C "{{ kdevops_results_repo_url_user}}@{{ kdevops_results_repo_path }}" -f {{ lookup('env', 'HOME') }}/.ssh/{{ kdevops_archive_key_name }}
  when:
    - not ssh_key_file_lookup.stat.exists

- name: Gracefully end if key does not exist
  meta: end_play
  when:
    - not ssh_key_file_lookup.stat.exists

- name: Check if kdevops results archive ssh key has a passphrase
  ansible.builtin.command:
    cmd: "ssh-keygen -y -f {{ kdevops_archive_identity_file }}"
  register: ssh_key_check
  ignore_errors: yes
  changed_when: false
  failed_when: false
  no_log: true

- name: Set fact about SSH key passphrase status
  ansible.builtin.set_fact:
    kdevops_archive_key_has_passphrase: "{{ ssh_key_check.rc != 0 }}"

- name: Inform user if key did not have a passphrase
  ansible.builtin.debug:
    msg: |
      ssh key archive {{ kdevops_archive_identity_file }} for {{ kdevops_results_repo_url }}
      does not have a passphrase. This not secure and not allowed. Giving up.
  when:
    - 'not kdevops_archive_key_has_passphrase|bool'

- name: End if key did not have passphrase set up
  meta: end_play
  when:
    - 'not kdevops_archive_key_has_passphrase|bool'

- name: Gracefully end if the user did not set up a kdevops archive repo key
  meta: end_play
  when: not kdevops_archive_key_detected

- name: Get fingerprint of the identity file for {{ kdevops_archive_key_name }}
  ansible.builtin.command: ssh-keygen -lf "{{ kdevops_archive_identity_file }}"
  register: kdevops_archive_fingerprint_output
  changed_when: false
  when:
    - 'kdevops_archive_key_detected|bool'

- name: Extract the {{ kdevops_archive_key_name }} fingerprint
  ansible.builtin.set_fact:
    kdevops_archive_key_fingerprint: "{{ kdevops_archive_fingerprint_output.stdout.split()[1] }}"
  when:
    - 'kdevops_archive_key_detected|bool'

- name: List keys in ssh-agent
  ansible.builtin.command: ssh-add -l
  register: kdevops_archive_ssh_add_list
  changed_when: false
  when:
    - 'kdevops_archive_key_detected|bool'

- name: Check if key is loaded in ssh-agent
  ansible.builtin.set_fact:
    kdevops_archive_key_loaded: "{{ kdevops_archive_key_fingerprint in kdevops_archive_ssh_add_list.stdout }}"

- name: Inform when we are achiving
  ansible.builtin.debug:
    msg: "Achievement unlocked: kdevops archive key set up, automatic kdevops archiving enabled."
  when:
    - 'kdevops_archive_key_loaded|bool'

- name: Check if kdevops-results-archive directory exists
  stat:
    path: "{{ kdevops_results_archive_dir }}"
  register: archive_dir

- name: Check if mirror directory exists
  stat:
    path: "{{ kdevops_archive }}"
  register: mirror_dir
  when:
    - not archive_dir.stat.exists

- name: Set kdevops_archive_mirror_present based on mirror directory existence
  set_fact:
    kdevops_archive_mirror_present: "{{ mirror_dir.stat.exists }}"
  when:
    - not archive_dir.stat.exists
    - mirror_dir.stat.exists

- name: Clone kdevops-results-archive repository with git LFS
  git:
    repo: "{{ kdevops_results_repo_url }}"
    dest: "{{ kdevops_results_archive_dir }}"
    version: main
  environment:
    GIT_LFS_SKIP_SMUDGE: "1"
  when:
    - not archive_dir.stat.exists
    - not kdevops_archive_mirror_present
  register: git_clone_result

- name: Clone kdevops-results-archive repository with git LFS and use the local mirror
  git:
    repo: "{{ kdevops_results_repo_url }}"
    dest: "{{ kdevops_results_archive_dir }}"
    version: main
    reference: "{{ kdevops_archive }}"
  environment:
    GIT_LFS_SKIP_SMUDGE: "1"
  when:
    - not archive_dir.stat.exists
    - kdevops_archive_mirror_present
  register: git_clone_result

- name: Update kdevops-results-archive repository
  git:
    repo: "{{ kdevops_results_repo_url }}"
    dest: "{{ kdevops_results_archive_dir }}"
    update: yes
    force: yes
  environment:
    GIT_LFS_SKIP_SMUDGE: "1"

- name: Remind user this is a demo
  ansible.builtin.debug:
    msg: "This is a kdevops archive demo, throw away results"
  when:
    - 'kdevops_archive_demo|bool'

- name: Get current date in YYYYMMDD format
  set_fact:
    current_date: "{{ '%Y%m%d' | strftime }}"

- name: Construct base directory path
  set_fact:
    kdevops_archive_base: "{{ kdevops_workflow_name }}/{{ current_user.stdout }}/{{ target_linux_tree }}/{{ current_date }}"

- name: Get current date in YYYYMMDD format
  set_fact:
    current_date: "{{ '%Y%m%d' | strftime }}"

- name: Construct base directory path
  set_fact:
    kdevops_archive_base: "{{ kdevops_workflow_name }}/{{ current_user.stdout }}/{{ target_linux_tree }}/{{ current_date }}"

- name: Ensure base directory exists
  file:
    path: "{{ kdevops_results_archive_dir }}/{{ kdevops_archive_base }}"
    state: directory
    mode: '0755'

- name: Get current date in YYYYMMDD format
  set_fact:
    current_date: "{{ '%Y%m%d' | strftime }}"

- name: Construct base directory path
  set_fact:
    kdevops_archive_base: "{{ kdevops_workflow_name }}/{{ current_user.stdout }}/{{ target_linux_tree }}/{{ current_date }}"

- name: List all directories in base path
  find:
    paths: "{{ kdevops_results_archive_dir }}/{{ kdevops_archive_base }}"
    file_type: directory
  register: all_dirs

- name: Get directory names only
  set_fact:
    dir_names: "{{ all_dirs.files | map(attribute='path') | map('basename') | list }}"

- name: Filter for numbered directories
  set_fact:
    numbered_dirs: "{{ dir_names | select('match', '^\\d{4}$') | list }}"

- name: Get highest number or default to 0
  set_fact:
    current_highest: "{{ (numbered_dirs | map('int') | max | default(0)) | int }}"

- name: Calculate next number
  set_fact:
    next_number_int: "{{ (current_highest | int) + 1 }}"

- name: Convert to padded string
  set_fact:
    next_number: "{{ '%04d' % (next_number_int | int)}}"

- name: Set archive test number
  set_fact:
    kdevops_archive_test_number: "{{ next_number }}"

- name: Set complete archive prefix
  set_fact:
    kdevops_archive_prefix: "{{ kdevops_archive_base }}/{{ next_number }}/{{ target_linux_ref }}/"

- name: Set complete archive prefix
  set_fact:
    kdevops_archive_prefix: "{{ kdevops_archive_base }}/{{ kdevops_archive_test_number }}/{{ target_linux_ref }}/"

- name: Create target directory if it doesn't exist
  file:
    path: "{{ kdevops_results_archive_dir }}/{{ kdevops_archive_prefix }}"
    state: directory
    mode: '0755'

- name: Copy archive to target directory
  copy:
    src: "{{ kdevops_results }}/{{ target_linux_ref }}.xz"
    dest: "{{ kdevops_results_archive_dir }}/{{ kdevops_archive_prefix }}"
    mode: '0644'

- name: Stage the new archive file
  command:
    cmd: git add "{{ kdevops_archive_prefix }}{{ target_linux_ref }}.xz"
  args:
    chdir: "{{ kdevops_results_archive_dir }}"

- name: Set commit message
  set_fact:
    commit_message: |
      {{ kdevops_workflow_name }}: {{ target_linux_tree }} {{ target_linux_ref }} result #{{ kdevops_archive_test_number }}

      This adds test results for:
        workflow: {{ kdevops_workflow_name }}
        tree: {{ target_linux_tree }}
        ref: {{ target_linux_ref }}
        test number: {{ kdevops_archive_test_number }}

- name: Commit the archive
  shell: |
    git commit -m "{{ commit_message }}"
  args:
    chdir: "{{ kdevops_results_archive_dir }}"

- name: Push changes to remote repository
  command:
    cmd: git push origin main
  args:
    chdir: "{{ kdevops_results_archive_dir }}"
  register: git_push_result
  ignore_errors: yes

- name: Display push error if it failed
  debug:
    msg: "Failed to push changes: {{ git_push_result.stderr }}"
  when: git_push_result.rc != 0
